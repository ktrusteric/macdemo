#!/usr/bin/env python3
"""
‰ªéJSONÊñá‰ª∂ÂØºÂÖ•v2ÁâàÊú¨ÂÜÖÂÆπÊï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì
"""

import asyncio
import sys
import os
import json
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from motor.motor_asyncio import AsyncIOMotorClient
from app.core.config import settings

def extract_tags(data, key, fallback_key=None):
    """ÊèêÂèñÊ†áÁ≠æÁöÑËæÖÂä©ÂáΩÊï∞ÔºåÂ§ÑÁêÜÂ≠óÁ¨¶‰∏≤Ê†ºÂºèÁöÑÊ†áÁ≠æ"""
    import ast
    tags = data.get(key, [])
    if not tags and fallback_key:
        tags = data.get(fallback_key, [])
    
    # Â§ÑÁêÜÂ≠óÁ¨¶‰∏≤Ê†ºÂºèÁöÑÊ†áÁ≠æÔºàÂ¶Ç "['Ë°å‰∏öËµÑËÆØ']"Ôºâ
    if isinstance(tags, str):
        try:
            # Â∞ùËØï‰ΩøÁî®ast.literal_evalÂÆâÂÖ®Ëß£Êûê
            tags = ast.literal_eval(tags)
        except (ValueError, SyntaxError):
            # Â¶ÇÊûúËß£ÊûêÂ§±Ë¥•ÔºåËøîÂõûÁ©∫ÂàóË°®
            tags = []
    
    return tags if isinstance(tags, list) else []

async def import_from_json():
    """‰ªéJSONÊñá‰ª∂ÂØºÂÖ•v2ÁâàÊú¨ÂÜÖÂÆπÊï∞ÊçÆ"""
    client = None
    try:
        client = AsyncIOMotorClient(settings.MONGODB_URL)
        db = client[settings.DATABASE_NAME]
        collection = db.content
        
        # ËØªÂèñJSONÊñá‰ª∂
        json_file_path = os.path.join(os.path.dirname(__file__), "shpgx_content_v2_corrected.json")
        
        if not os.path.exists(json_file_path):
            print(f"‚ùå JSONÊñá‰ª∂‰∏çÂ≠òÂú®: {json_file_path}")
            return
        
        with open(json_file_path, 'r', encoding='utf-8') as f:
            raw_data = json.load(f)
        
        print(f"üöÄ ÂºÄÂßã‰ªéJSONÊñá‰ª∂ÂØºÂÖ•v2ÁâàÊú¨ÂÜÖÂÆπÊï∞ÊçÆ... (ÂÖ±{len(raw_data)}ÁØá)")
        
        imported_count = 0
        for article_data in raw_data:
            # Ê†áÂáÜÂåñÊ†áÁ≠æ
            basic_info_tags = extract_tags(article_data, "Âü∫Á°Ä‰ø°ÊÅØÊ†áÁ≠æ")
            energy_type_tags = extract_tags(article_data, "ËÉΩÊ∫êÂìÅÁßçÊ†áÁ≠æ")
            region_tags = extract_tags(article_data, "Âú∞ÂüüÊ†áÁ≠æ") + article_data.get("ËßÑËåÉÂåñÂú∞ÂüüÊ†áÁ≠æ", [])
            business_field_tags = extract_tags(article_data, "‰∏öÂä°È¢ÜÂüü/‰∏ªÈ¢òÊ†áÁ≠æ")
            beneficiary_tags = extract_tags(article_data, "ÂèóÁõä‰∏ª‰ΩìÊ†áÁ≠æ")
            policy_measure_tags = extract_tags(article_data, "ÂÖ≥ÈîÆÊé™ÊñΩ/ÊîøÁ≠ñÊ†áÁ≠æ")
            importance_tags = extract_tags(article_data, "ÈáçË¶ÅÊÄß/ÂΩ±ÂìçÂäõÊ†áÁ≠æ")
            
            # Á°ÆÂÆöÂÜÖÂÆπÁ±ªÂûã
            content_type = "news"  # ÈªòËÆ§‰∏∫Ë°å‰∏öËµÑËÆØ
            if "ÊîøÁ≠ñÊ≥ïËßÑ" in basic_info_tags:
                content_type = "policy"
            elif "‰∫§ÊòìÂÖ¨Âëä" in basic_info_tags:
                content_type = "announcement"
            elif "Ë∞É‰ª∑ÂÖ¨Âëä" in basic_info_tags:
                content_type = "price"
            
            # ËΩ¨Êç¢‰∏∫Êï∞ÊçÆÂ∫ìÊ†ºÂºè
            db_article = {
                "title": article_data["Ê†áÈ¢ò"],
                "content": article_data["ÊñáÁ´†ÂÜÖÂÆπ"],
                "type": content_type,
                "source": article_data["Êù•Ê∫êÊú∫ÊûÑ"],
                "publish_time": article_data.get("ÂèëÂ∏ÉÊó∂Èó¥", article_data.get("ÂèëÂ∏ÉÊó•Êúü")),
                "link": article_data["ÈìæÊé•"],
                "basic_info_tags": basic_info_tags,
                "energy_type_tags": energy_type_tags,
                "region_tags": list(set(region_tags)),  # ÂéªÈáç
                "business_field_tags": business_field_tags,
                "beneficiary_tags": beneficiary_tags,
                "policy_measure_tags": policy_measure_tags,
                "importance_tags": importance_tags,
                "version": "v2",  # Ê†áËÆ∞‰∏∫v2ÁâàÊú¨
                "created_at": datetime.now(),
                "updated_at": datetime.now()
            }
            
            # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÊ†áÈ¢òÁöÑÊñáÁ´†
            existing = await collection.find_one({"title": db_article["title"]})
            if not existing:
                await collection.insert_one(db_article)
                imported_count += 1
                print(f"‚úÖ ÂØºÂÖ•ÊñáÁ´†: {db_article['title'][:50]}...")
            else:
                print(f"‚ö†Ô∏è  ÊñáÁ´†Â∑≤Â≠òÂú®ÔºåË∑≥Ëøá: {db_article['title'][:50]}...")
        
        # ÁªüËÆ°È™åËØÅ
        total_v1 = await collection.count_documents({"version": {"$ne": "v2"}})
        total_v2 = await collection.count_documents({"version": "v2"})
        total_all = await collection.count_documents({})
        
        print(f"\nüìä ÂØºÂÖ•ÂÆåÊàêÁªüËÆ°:")
        print(f"   Êú¨Ê¨°ÂØºÂÖ•: {imported_count} ÁØá")
        print(f"   v1ÁâàÊú¨ÊñáÁ´†: {total_v1} ÁØá")
        print(f"   v2ÁâàÊú¨ÊñáÁ´†: {total_v2} ÁØá")
        print(f"   ÊÄªÊñáÁ´†Êï∞: {total_all} ÁØá")
        
        # ÊåâÁ±ªÂûãÁªüËÆ°v2ÁâàÊú¨
        news_count = await collection.count_documents({"version": "v2", "basic_info_tags": "Ë°å‰∏öËµÑËÆØ"})
        policy_count = await collection.count_documents({"version": "v2", "basic_info_tags": "ÊîøÁ≠ñÊ≥ïËßÑ"})
        
        print(f"\nüìà v2ÁâàÊú¨ÂàÜÁ±ªÁªüËÆ°:")
        print(f"   Ë°å‰∏öËµÑËÆØ: {news_count} ÁØá")
        print(f"   ÊîøÁ≠ñÊ≥ïËßÑ: {policy_count} ÁØá")
        
        # È™åËØÅÈìæÊé•Ê†ºÂºè
        print(f"\nüîó È™åËØÅÈìæÊé•Ê†ºÂºè:")
        cursor = collection.find({"version": "v2"}, {"title": 1, "link": 1}).limit(3)
        async for doc in cursor:
            title = doc.get('title', 'Êú™Áü•')[:40]
            link = doc.get('link', 'Êú™Áü•')
            print(f"   {title}... -> {link}")
        
    except Exception as e:
        print(f"‚ùå ÂØºÂÖ•Â§±Ë¥•: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if client:
            client.close()

if __name__ == "__main__":
    asyncio.run(import_from_json()) 